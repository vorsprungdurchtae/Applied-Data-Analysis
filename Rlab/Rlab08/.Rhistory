colnames(df_diff) = cols_diff
for(i in 1:1000){
runi10 = runif(10, 0, 40)
runi20 = runif(20, 0, 40)
runi50 = runif(50, 0, 40)
rnorm10 = rnorm(10, 15, 10)
rnorm20 = rnorm(20, 15, 10)
rnorm50 = rnorm(50, 15, 10)
err10 = 5*(rexp(10, 1) - 1)
err20 = 5*(rexp(20, 1) - 1)
err50 = 5*(rexp(50, 1) - 1)
be1 = 35
be2 = 0.5
be3 = -0.1
mu1 = be1 + be2*runi10 + be3*rnorm10
y1 = mu1 + err10
mu2 = be1 + be2*runi20 + be3*rnorm20
y2 = mu2 + err20
mu3 = be1 + be2*runi50 + be3*rnorm50
y3 = mu3 + err50
fit.temp1 = lm(y1 ~ runi10 + rnorm10)
fit.temp2 = lm(y2 ~ runi20 + rnorm20)
fit.temp3 = lm(y3 ~ runi50 + rnorm50)
df_beta2[i,]$N10 = as.numeric(fit.temp1$coefficients)[3]
df_beta2[i,]$N20 = as.numeric(fit.temp1$coefficients)[3]
df_beta2[i,]$N50 = as.numeric(fit.temp1$coefficients)[3]
dif1 = norm(c(be1,be2,be3) - fit.temp1$coefficients, type = "2")
dif2 = norm(c(be1,be2,be3) - fit.temp2$coefficients, type = "2")
dif3 = norm(c(be1,be2,be3) - fit.temp3$coefficients, type = "2")
df_diff[i,]$N10 = dif1
df_diff[i,]$N20 = dif2
df_diff[i,]$N50 = dif3
}
df_beta2
df_diff
temp_beta2 = reshape(df_beta2, direction = "long", varying = 2:4, sep = "")
boxplot(df_beta2)
par(mfrow=c(1,1))
boxplot(df_beta2)
head(df_beta2)
set.seed(2020)
df_beta2 = data.frame(matrix(ncol = 3, nrow = 1000))
cols_beta2 = c("N10", "N20", "N50")
colnames(df_beta2) = cols_beta2
df_diff = data.frame(matrix(ncol = 3, nrow = 1000))
cols_diff = c("N10", "N20", "N50")
colnames(df_diff) = cols_diff
for(i in 1:1000){
runi10 = runif(10, 0, 40)
runi20 = runif(20, 0, 40)
runi50 = runif(50, 0, 40)
rnorm10 = rnorm(10, 15, 10)
rnorm20 = rnorm(20, 15, 10)
rnorm50 = rnorm(50, 15, 10)
err10 = 5*(rexp(10, 1) - 1)
err20 = 5*(rexp(20, 1) - 1)
err50 = 5*(rexp(50, 1) - 1)
be1 = 35
be2 = 0.5
be3 = -0.1
mu1 = be1 + be2*runi10 + be3*rnorm10
y1 = mu1 + err10
mu2 = be1 + be2*runi20 + be3*rnorm20
y2 = mu2 + err20
mu3 = be1 + be2*runi50 + be3*rnorm50
y3 = mu3 + err50
fit.temp1 = lm(y1 ~ runi10 + rnorm10)
fit.temp2 = lm(y2 ~ runi20 + rnorm20)
fit.temp3 = lm(y3 ~ runi50 + rnorm50)
df_beta2[i,]$N10 = as.numeric(fit.temp1$coefficients)[3]
df_beta2[i,]$N20 = as.numeric(fit.temp2$coefficients)[3]
df_beta2[i,]$N50 = as.numeric(fit.temp3$coefficients)[3]
dif1 = norm(c(be1,be2,be3) - fit.temp1$coefficients, type = "2")
dif2 = norm(c(be1,be2,be3) - fit.temp2$coefficients, type = "2")
dif3 = norm(c(be1,be2,be3) - fit.temp3$coefficients, type = "2")
df_diff[i,]$N10 = dif1
df_diff[i,]$N20 = dif2
df_diff[i,]$N50 = dif3
}
boxplot(df_beta2)
density_beta2_10 = density(df_beta2$N10)
density_beta2_10 = density(df_beta2$N10)
density_beta2_20 = density(df_beta2$N20)
density_beta2_50 = density(df_beta2$N50)
plot(df_beta2$N10, density_beta2_10, col = "blue")
length(df_beta2)
length(df_beta2$N10)
density_beta2_10
length(density_beta2_10)
plot(density_beta2_10)
curve(dnorm(x, mean = mean(density_beta2_10), sd = sd(density_beta2_10)), add = TRUE, col = "red")
curve(dnorm(density_beta2_10, mean = mean(density_beta2_10), sd = sd(density_beta2_10)), add = TRUE, col = "red")
curve(dnorm(df_beta2$N10, mean = mean(density_beta2_10), sd = sd(density_beta2_10)), add = TRUE, col = "red")
dnorm(x, mean= 10, sd = 2)
plot(density_beta2_10)
density_beta2_10
order(df_beta2$N10)
curve(dnorm(df_beta2$N10[order(df_beta2$N10)],
mean = mean(density_beta2_10),
sd = sd(density_beta2_10)),
add = TRUE,
col = "red")
density_beta2_10
df_beta2$N10
curve(dnorm(df_beta2$N10[order(df_beta2$N10)],
mean = mean(df_beta2$N10),
sd = sd(df_beta2$N10)),
add = TRUE,
col = "red")
plot(density_beta2_10)
curve(dnorm(df_beta2$N10[order(df_beta2$N10)],
mean = mean(df_beta2$N10),
sd = sd(df_beta2$N10)),
add = TRUE,
col = "red")
curve(dnorm(df_beta2$N10,
mean = mean(df_beta2$N10),
sd = sd(df_beta2$N10)),
add = TRUE,
col = "red")
curve(dnorm(x,
mean = mean(df_beta2$N10),
sd = sd(df_beta2$N10)),
add = TRUE,
col = "red")
plot(density_beta2_20)
curve(dnorm(x,
mean = mean(df_beta2$N20),
sd = sd(df_beta2$N20)),
add = TRUE,
col = "blue")
plot(density_beta2_50)
curve(dnorm(x,
mean = mean(df_beta2$N50),
sd = sd(df_beta2$N50)),
add = TRUE,
col = "green")
my.edf.func = function(my.a, my.b, my.c, my.pi){
return(my.edf.pmf = function(y, v){
return((y*v - my.b(v))/a(my.pi) - c(y, my.pi))
})
}
my.edf.func = function(my.a, my.b, my.c, my.pi){
return(my.edf.pmf = function(y, v){
return(exp((y*v - my.b(v))/a(my.pi) - c(y, my.pi)))
})
}
# (ii) The arguments of the second function
# should be the functions T, h and B
# (see Definition II.2.7
# with ηj(θ) := θj, j = 1,...,k for θ = (θ1,...,θk) ∈ Θ ⊂ Rk).
# The function should return another function with the arguments y
# and θ whose return value is the value of the pmf/pdf of Y at y
# for the natural parameter vector θ.
my.k.param = function(my.T, my.h, my.B){
return(my.k.param.func = function(y, my.v){
return(exp(my.v %*% my.T(y) - my.B(my.v)) * my.h(y))
})
my.a.identity = function(a){
return(a)
}
ln(19)
)
my.b.ln = function(v){
return(-log(1 - exp(v)))
}
my.edf.1 = my.edf.func(my.a.identity, my.b.ln, my.c.zero, 1)
x = 0:6
my.edf.1.pdf = my.edf.1(x, -0.8)
my.edf.func = function(my.a, my.b, my.c, my.pi){
return(my.edf.pmf = function(y, v){
return(exp((y*v - my.b(v))/my.a(my.pi) - my.c(y, my.pi)))
})
}
# (ii) The arguments of the second function
# should be the functions T, h and B
# (see Definition II.2.7
# with ηj(θ) := θj, j = 1,...,k for θ = (θ1,...,θk) ∈ Θ ⊂ Rk).
# The function should return another function with the arguments y
# and θ whose return value is the value of the pmf/pdf of Y at y
# for the natural parameter vector θ.
my.k.param = function(my.T, my.h, my.B){
return(my.k.param.func = function(y, my.v){
return(exp(my.v %*% my.T(y) - my.B(my.v)) * my.h(y))
})
}
# (b) A pmf of a random variable with values in N0 is
# given by a member of the exponential dispersion family with
# a = identity function
# b: v -> -ln(1-exp(v))
# c: . -> 0
my.a.identity = function(a){
return(a)
}
my.b.ln = function(v){
return(-log(1 - exp(v)))
}
my.c.zero = function(y, pii){
return(0)
}
my.edf.1 = my.edf.func(my.a.identity, my.b.ln, my.c.zero, 1)
x = 0:6
my.edf.1.pdf = my.edf.1(x, -0.8)
my.edf.1.pdf
dgeom(x, 1-exp(-0.8))
plot(x, my.edf.1.pdf, col = "red")
plot(x, dgeom(x, 1-exp(-0.8)), col = "blue")
geom.samples = rgeom(200, 1-exp(-0.8))
geom.table = table(geom.samples)
geom.table
plot.vals = as.numeric(names(geom.table))
plot.vals
observed.vals = as.numeric(names(geom.table))
plot.vals = 0:max(observed.vals)
observed.vals
comb.table = matrix(0, 2, 7)
colnames(comb.table) = x
rownames(comb.table) = c("my.edf.1.pdf", "dgeom")
comb.table
comb.table[1,] = my.edf.1(x, -0.8)
comb.table[2,] = dgeom(x, 1-exp(-0.8))
comb.table
barplot(comb.table,
beside = TRUE,
col = c("blue", "red"),
ylab = "probability",
xlab = "value",
legend.text = TRUE,
args.legend = list(x = "topright"))
comb.table
n = 200
z = rgeom(n, 1-exp(-0.8))
freq.table = table(z)
z
freq.table
n = 200
z = rgeom(n, 1-exp(-0.8))
freq.table = table(z)
observed.vals = as.numeric(names(freq.table))
comb.table = matrix(0, 2, length(plot.vals))
colnames(comb.table) = plot.vals
rownames(comb.table) = c("sample", "exp.family")
comb.table[1, observed.vals + 1] = freq.table/n
comb.table[2,] = my.edf.1(plot.vals, -0.8)
barplot(comb.table,
beside = TRUE,
col = c("blue", "red"),
ylab = "relative frequency / probability",
xlab = "value",
legend.text = TRUE,
args.legend = list(x = "topright")
)
my.b.c = function(v){
return(ifelse(v < 0, -log((-v^3)/2), {
warning("b is only defined for theta<0. Return 0 for other values of theta.");
0}))
}
my.c.c = function(y, my.pi){
return(log(y^2))
}
edf.c = my.edf.func(my.a.identity, my.b.c, my.c.c, 1)
x = 1:10
table(edf.c(x, natural.param.c))
natural.param.c = -2
dispers.param.c = 1
table(edf.c(x, natural.param.c))
curve(dgamma.own(x,theta),xlim=c(0,5))
curve(dgamma(x,3,-theta),col="red",add=TRUE)
curve(dgamma.own(x,theta),xlim=c(0,5))
curve(dgamma(x,3,-theta),col="red",add=TRUE)
curve(edf.c(x, -2), xlim =c(0,5))
curve(dgamma(x, 3, -2), col = "red", add=TRUE)
curve(dgamma(x, 3, 2), col = "red", add=TRUE)
curve(dgamma(0:5, 3, 2), col = "red", add=TRUE)
x
curve(dgamma(x, 3, 2), col = "red", add=TRUE)
curve(edf.c(x, -2), xlim =c(0,5))
curve(dgamma(x, 3, 2), col = "red", add=TRUE ,xlim=c(0,5))
curve(dgamma(x,3,-theta),col="red",add=TRUE)
curve(dgamma.own(x,theta),xlim=c(0,5))
curve(dgamma.own(x, -2),xlim=c(0,5))
curve(dgamma(x,3,2),col="red",add=TRUE)
my.b.c = function(v){
return(ifelse(v < 0, -log((-v)^3/2), {
warning("b is only defined for theta<0. Return 0 for other values of theta.");
0}))
}
edf.c = my.edf.func(my.a.identity, my.b.c, my.c.c, 1)
curve(edf.c(x, -2),xlim=c(0,5))
my.b.c = function(v){
return(ifelse(v < 0, -log(((-v)^3)/2), {
warning("b is only defined for theta<0. Return 0 for other values of theta.");
0}))
}
edf.c = my.edf.func(my.a.identity, my.b.c, my.c.c, 1)
curve(edf.c(x, -2),xlim=c(0,5))
curve(edf.c(x, -2), xlim =c(0,5))
curve(edf.c(x, -2), xlim =c(0,5))
curve(dgamma(x, 3, 2), col = "red", add=TRUE ,xlim=c(0,5))
curve(dgamma(x,3,2),col="red",add=TRUE)
curve(edf.c(x, -2), xlim=c(0,5))
curve(dgamma.own(x, -2), xlim=c(0,5))
my.edf.func = function(my.a, my.b, my.c, my.pi){
return(my.edf.pmf = function(y, v){
return(exp((y*v - my.b(v))/my.a(my.pi) + my.c(y, my.pi)))
})
}
edf.c = my.edf.func(my.a.identity, my.b.c, my.c.c, 1)
curve(edf.c(x, -2), xlim=c(0,5))
curve(edf.c(x, -2), xlim=c(0,5))
curve(dgamma(x,3,2),col="red",add=TRUE)
z = rgamma(200, 3, 2)
z
hist(z, freq = FALSE, ylim = c(0,.8))
curve(edf.c(x, -2), col = "red", add = TRUE)
xlim(0, 5)
x
my.h = function(y){
return(ifelse(y>0, 1, {warning("y should be greater than 0");0}))
}
my.B = function(theta){
return(log(gamma(theta[1] + 1)) - (theta[1] + 1)*log(-theta[2]))
}
my.T.c = function(y){
return(ifelse(y>0, c(log(y), y), {warning("y should be greater than 0");0}))
}
my.h.c = function(y){
return(ifelse(y>0, 1, {warning("y should be greater than 0");0}))
}
my.B.c = function(theta){
return(log(gamma(theta[1] + 1)) - (theta[1] + 1)*log(-theta[2]))
}
my.func.d = my.k.param(my.T.c, my.h.c, my.B.c)
gamma(3)
hist(z, freq = FALSE, ylim = c(0,.8))
curve(my.func.d(x, theta.d), col = "blue", add = TRUE)
theta.d = c(2, -2)
curve(my.func.d(x, theta.d), col = "blue", add = TRUE)
my.T.c(3)
my.T.c = function(y){
return(ifelse(y>0, c(log(y), y), {warning("y should be greater than 0");0}))
}
my.T.c(3)
my.T.c = function(y){
return(matrix(c(log(y), y), byrow = TRUE, nrow = 2))
}
my.func.d = my.k.param(my.T.c, my.h.c, my.B.c)
curve(my.func.d(x, theta.d), col = "blue", add = TRUE)
setwd("~/Desktop/RWTH/SS22/Applied-Data-Analysis/Rlab/Rlab06")
sim =  read.csv2("Sim1.csv", header = TRUE, sep = ",")
sim1=  read.csv2("Sim1.csv", header = TRUE, sep = ",")
sim1
sim1=  read.csv2("Sim1.csv", header = FALSE, sep = ",")
sim1
sim1 = read.table("Sim1.csv", header = TRUE, sep = ",")
sim1
sim1 = read.csv("Sim1.csv", header = TRUE, sep = ",")
sim1
fit.sim = lm(y ~ x1 + x2, data = sim1)
fit.sim = lm(y ~ x1 + x2, data = sim1)
par(mfrow=c(2,2))
plot(fit.sim)
par(mfrow=c(1,1))
plot(cooks.distance(fit.sim))
fit.sim.log = lm(log(y) ~ x1 + x2, data = sim1)
par(mfrow=c(2,2))
plot(fit.sim)
par(mfrow=c(1,1))
plot(cooks.distance(fit.sim))
par(mfrow=c(2,2))
plot(fit.sim.log)
par(mfrow=c(1,1))
plot(cooks.distance(fit.sim.log))
summary(fit.sim)
summary(fit.sim.log)
fit.sim.log2 = lm(log(y) ~ x1, data = sim1)
par(mfrow=c(2,2))
plot(fit.sim.log2)
par(mfrow=c(1,1))
plot(cooks.distance(fit.sim.log2))
shapiro.test(fit.sim.log)
shapiro.test(fit.sim.log$residuals)
shapiro.test(fit.sim.log2$residuals)
shapiro.test(fit.sim$residuals)
EY = rep(NA, length(sim$y))
EY[x1 == 1] = exp(1.5)
EY[x1 == 0] = exp(1)
EY
exp(fit.sim.log2$fitted.values)[x1 == 0]
exp(fit.sim.log2$fitted.values)[x1 == 1]
(exp(fit.sim.log2$fitted.values)[x1 == 1])[1]
setwd("~/Desktop/RWTH/SS22/Applied-Data-Analysis/Rlab/Rlab07")
fit.windmill = read.table("Windmill.dat")
windmill = read.table("Windmill.dat")
windmill
windmill = read.table("Windmill.dat", header = TRUE)
windmill
sapply(windmill, clas)
sapply(windmill, class)
windmill
head(windmill)
sapply(windmill, class)
windmill$bin1 = as.factor(windmill$bin1)
rbinom(nrow(windmill), 2, 1/3)
rbinom(nrow(windmill), 1, 1/3)
random.idx = rbinom(nrow(windmill), 1, 2/3)
random.idx
table(random.idx)
random.idx[random.idx == 1]
where(random.idx == 1)
which(random.idx == 1)
binom.idx = rbinom(nrow(windmill), 1, 2/3)
windmill.train = windmill[which(binom.idx == 1)]
windmill.train = windmill[which(binom.idx == 1),]
windmill.train
windmill.fit1 = lm(Cspd ~ Spd1 * Spd1Lag1 + Spd2 * Spd2Lag1 + Spd3 * Spd3Lag1 + Spd4 * Spd4Lag1+
Spd1sin1 + Spd1cos1 + bin1 + Dir1)
colnames(windmill)
windmill.fit1 = lm(CSpd ~ Spd1 * Spd1Lag1 + Spd2 * Spd2Lag1 + Spd3 * Spd3Lag1 + Spd4 * Spd4Lag1+
Spd1sin1 + Spd1cos1 + bin1 + Dir1, data = windmill)
AIC(windmill.fit1)
BIC(windmill.fit1)
windmill.fit2 = lm(Cspd ~ Spd1 + Spd1Lag1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 + Spd4 + Spd4Lag1+
Spd1sin1 + Spd1cos1 + bin1 + Dir1, data = windmill)
windmill.fit2 = lm(CSpd ~ Spd1 + Spd1Lag1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 + Spd4 + Spd4Lag1+
Spd1sin1 + Spd1cos1 + bin1 + Dir1, data = windmill)
AIC(windmill.fit2)
BIC(windmill.fit2)
step(windmill.fit1)
step(windmill.fit1, direction = "both")
step(windmill.fit1, direction = "forward")
step(windmill.fit1, direction = "backward")
step(windmill.fit1, direction = "both", k = log(n))
step(windmill.fit1, direction = "both", k = log(n))
step(windmill.fit1, direction = "forward", k = log(n))
step(windmill.fit1, direction = "backward", k = log(n))
step(windmill.fit1, direction = "both")
step(windmill.fit1, direction = "forward")
step(windmill.fit1, direction = "backward")
fit.AIC = lm(CSpd ~ Spd1 + Spd1Lag1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 +
Spd4 + Spd4Lag1 + Spd1cos1 + bin1 + Spd2:Spd2Lag1 + Spd3:Spd3Lag1, data = windmill)
fit.AIC = lm(CSpd ~ Spd1 + Spd1Lag1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 +
Spd4 + Spd4Lag1 + Spd1cos1 + bin1 + Spd2:Spd2Lag1 + Spd3:Spd3Lag1, data = windmill)
PRESS.AIC = sum(windmill$CSpd - fitted(fit.AIC)^2)
# ii)
fit.BIC = lm(CSpd ~ Spd1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 + Spd4 + Spd4Lag1 +
Dir1 + Spd2:Spd2Lag1 + Spd3:Spd3Lag1 + Spd4:Spd4Lag1, data = windmill)
PRESS.BIC = sum(windmill$CSpd - fitted(fit.BIC)^2)
PRESS.AIC
PRESS.BIC
fit.AIC = lm(CSpd ~ Spd1 + Spd1Lag1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 +
Spd4 + Spd4Lag1 + Spd1cos1 + bin1 + Spd2:Spd2Lag1 + Spd3:Spd3Lag1, data = windmill)
PRESS.AIC = sum((windmill$CSpd - fitted(fit.AIC))^2)
# ii)
fit.BIC = lm(CSpd ~ Spd1 + Spd2 + Spd2Lag1 + Spd3 + Spd3Lag1 + Spd4 + Spd4Lag1 +
Dir1 + Spd2:Spd2Lag1 + Spd3:Spd3Lag1 + Spd4:Spd4Lag1, data = windmill)
PRESS.BIC = sum((windmill$CSpd - fitted(fit.BIC))^2)
PRESS.BIC
PRESS.AIC
x.unif = runif(25, 20, 80)
xnif
x.unif
x.unif = runif(25, 20, 80)
beta.x.unif = exp(0.08*x -2)
y.gamma = rgamma(25, 1, beta.x.unif)
y.gamma
fit.y.gamma = glm(y ~ x.unif, family = "Gamma")
length(y.gamma)
length(x.unif)
x.unif = runif(25, 20, 80)
#y.unif = rgamma()
beta.x.unif = exp(0.08*x -2)
y.gamma = rgamma(25, 1, beta.x.unif)
fit.y.gamma = glm(y.gamma ~ x.unif, family = "Gamma")
cor.table = data.frame(matrix(nrow = 1, ncol = 4))
cor.columns = c("25","100","1000", "10000")
cor.table = data.frame(matrix(nrow = 1, ncol = 4))
cor.columns = c("25","100","1000", "10000")
colnames(cor.table) = cor.columns
cor.table = data.frame(matrix(nrow = 1, ncol = 4))
cor.columns = c("25","100","1000", "10000")
colnames(cor.table) = cor.columns
cor.table
cor.table$25
row = c(0,0,0,0)
row[1]
for(i in 1:4){
Ns = c(25, 100, 1000, 10000)
x.unif = runif(Ns[i], 20, 80)
beta.x.unif = exp(0.08*x - 2)
y.gamma = rgamma(Ns[i], 1, beta.x.unif)
fit.y.gamma = glm(y.gamma ~ x.unif, family = "Gamma")
row[i] = corr(y.gamma - fitted(fit.y.gamma), fitted(fit.y.gamma))
}
for(i in 1:4){
Ns = c(25, 100, 1000, 10000)
x.unif = runif(Ns[i], 20, 80)
beta.x.unif = exp(0.08*x - 2)
y.gamma = rgamma(Ns[i], 1, beta.x.unif)
fit.y.gamma = glm(y.gamma ~ x.unif, family = "Gamma")
row[i] = cor(y.gamma - fitted(fit.y.gamma), fitted(fit.y.gamma))
}
row
setwd("~/Desktop/RWTH/SS22/Applied-Data-Analysis/Rlab/Rlab08")
transpt = read.csv("transportation.csv", header = TRUE)
transpt
transpt = read.csv("transportation.csv", header = TRUE, sep = ";")
transpt
sapply(transpt, class)
ggplot(transpt, aes(x=transport, y=time, color=transport)) +
geom_boxplot()
boxplot(transpt$time ~ transpt$transport, xlab = "transport", ylab = "time")
