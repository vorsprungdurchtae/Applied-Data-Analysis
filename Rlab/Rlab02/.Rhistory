#c
###
c.a <- functon(phi){
return(phi)
}
c.b <- function(theta){
ifelse(theta<0,-log((-theta)^3/2),{
warning("B is only defined for theta<0. Return 0 for other values of theta.");
0})
}
c.c <- function(y, theta){
return(log(y^2))
}
theta = -2
dgeom.own <- myedf(c.a, c.b, c.c, 1)
curve(dgamma.own(x, theta), xlim=c(0,5))
curve(dgamma(x,3,-theta), col = "red", add=TRUE)
n = 200
z = rgamma(n, 3,2)
hist(z,freq=FALSE,ylim=c(0, .8))
curve(dgamma.own(x,theta),col="red",add=TRUE)
# (d)
T.gamma = function(x){
return(matrix(c(log(x),x),byrow = TRUE,nrow=2))
}
B.gamma = function(theta){
return(log(gamma(theta[1]+1))-(theta[1]+1)*log(-theta[2]))
}
h.gamma = function(x){
ifelse(x>=0,1,0)
}
dgamma.own.alt = d.nat.exp.fam(T.gamma,B.gamma,h.gamma)
theta.natural = c(2 , -2)
curve(dgamma.own(x,theta),xlim=c(0,5))
curve(dgamma.own.alt(x,theta.natural),col="red",add=TRUE)
#######
#Task20
#######
sim = read.csv("/Users/thetruetae/Desktop/RWTH/SS21/ADA/RLab/R-Lab6/Sim1.csv", header = TRUE, sep = ",")
lm_sim = lm(sim$y ~sim$x1 + sim$x2, data = sim)
par(mfrow = c(2,2))
plot(lm_sim)
shapiro.test(lm_sim$residuals)
simfit1 = lm(log(sim$y) ~sim$x1 + sim$x2, data = sim)
plot(simfit1)
shapiro.test(simfit1$residuals)
summary(simfit1)
simfit2 = lm(log(sim$y) ~sim$x1, data = sim)
plot(simfit2)
shapiro.test(simfit2$residuals)
summary(simfit2)
par(mfrow = c(2,2))
plot(lm_sim)
shapiro.test(lm_sim$residuals)
par(mfrow = c(2,2))
plot(lm_sim)
simfit1 = lm(log(sim$y) ~sim$x1 + sim$x2, data = sim)
plot(simfit1)
shapiro.test(simfit1$residuals)
summary(simfit1)
simfit1 = lm(log(sim$y) ~sim$x1 + sim$x2, data = sim)
plot(simfit1)
shapiro.test(simfit1$residuals)
id <- rbind(c(1,0,0),c(1,0,1), c(0,0,1))
mean(id)
b = function(x){return(1/(x*ln(x)))}
curve(b, from = 1, to = inf, xlab = "x", ylab = "y")
curve(b, from = 1, to = Inf, xlab = "x", ylab = "y")
curve(b, from = 1, to = 99999999999999999, xlab = "x", ylab = "y")
b = function(x){return(1/(x*log(x)))}
b = function(x){return(1/(x*log(x)))}
curve(b, from = 1, to = 99999999999999999, xlab = "x", ylab = "y")
###################
#######TASK5#######
#a)
norm_sample_30 <- rnorm(5, 30)
norm_sample_30
#a)
norm_sample_30 <- rnorm(30, 5, 2)
norm_sample_100 <- rnorm(100, 5, 2)
norm_sample_300 <- rnorm(300, 5, 2)
###################
#######TASK5#######
#a)
norm_sample_30 <- rnorm(30, 5, 2)
norm_sample_100 <- rnorm(100, 5, 2)
norm_sample_300 <- rnorm(300, 5, 2)
hist(norm_sample_30)
###################
#######TASK5#######
#a)
norm_sample_30 <- rnorm(30, 5, 2)
norm_sample_100 <- rnorm(100, 5, 2)
norm_sample_300 <- rnorm(300, 5, 2)
hist(norm_sample_30)
hist(norm_sample_100)
hist(norm_sample_300)
plot(density(norm_sample_30))
plot(density(norm_sample_30))
plot(density(norm_sample_100))
plot(density(norm_sample_30))
plot(density(norm_sample_100))
plot(density(norm_sample_300))
install.packages("ggplot2")
library(ggplot2)
plot(norm_sample_30)
density(norm_sample_30)
p <- ggplot(norm_sample_30)
p
plot(density(norm_sample_30))
hist(norm_sample_300)
lines(density(norm_sample_300))
hist(norm_sample_300)
lines(density(norm_sample_300))
hist(norm_sample_300)
lines(density(norm_sample_300), lwd = 2, col = "red")
plot(density(norm_sample_300))
hist(norm_sample_300)
density(norm_sample_30)
density(norm_sample_30)[2]
density(norm_sample_30)[1]
hist(norm_sample_300)
lines(density(norm_sample_300)*300, lwd = 2, col = "red")
norm_sample_300
lines(density(norm_sample_300), lwd = 2, col = "red")
plot(density(norm_sample_300))
hist(norm_sample_300)
plot(density(norm_sample_300))
hist(norm_sample_300, prob = TRUE)
hist(norm_sample_300, prob = TRUE)
lines(density(norm_sample_300), lwd = 2, col = "red")
plot(density(norm_sample_300))
#b)
#draw the histogram of random sample 300 with probability
#otherwise it shows the frequency
# frequency always > 1, which is way more great than the density
# because density is always <= 1
hist(norm_sample_300, prob = TRUE)
# lines is the function to add lines of the given data
# to the plot
lines(density(norm_sample_300), lwd = 2, col = "red")
install.packages("mvtnorm")
library(ggplot2)
library(mvtnorm)
rep(0, 4)
diag(3)
sigma_task6 <- diag(4)
norm_sample_100_I4 <- rmvnorm(100,
mean = rep(0, nrow(sigma_task6)),
sigma = sigma_task6)
norm_sample_100_I4
#b) Initialize a vector μ = (1, 0, 2, −1)′ and matrices
# pseudo mean mu = (1, 0, 2, -1)
pseudo_mean_task6 <- c(1, 0, 2, -1)
# pseudo matrix sigma 1
peseudo_matrix_task6 <- matrix(c(4, 2, 2, 3,
2, 3, 2, 1,
2, 2, 5, 2,
3, 1, 2, 3), nrow = 4, ncol = 4)
pseudo_matrix_task6
peseudo_matrix_task6
#b) Initialize a vector μ = (1, 0, 2, −1)′ and matrices
# pseudo mean mu = (1, 0, 2, -1)
pseudo_mean_task6 <- c(1, 0, 2, -1)
# pseudo matrix sigma 1
pseudo_matrix_task6_1 <- matrix(c(4, 2, 2, 3,
2, 3, 2, 1,
2, 2, 5, 2,
3, 1, 2, 3), nrow = 4, ncol = 4)
pseudo_matrix_task6_2 <- matrix(c(4.5,  4.75, 2,    2.25,
4.75, 5.25, 2.75, 3.25,
2,    2.75, 5.75, 3.5,
2.25, 3.25, 3.5,  4.5), nrow = 4, ncol = 4)
pseudo_matrix_task6_2
# pseudo matrix sigma 2
pseudo_matrix_task6_2 <- matrix(c(4.5,  4.75, 2,    2.25,
4.75, 5.25, 2.75, 3.25,
2,    2.75, 2.75, 3.5,
2.25, 3.25, 3.5,  4.5), nrow = 4, ncol = 4)
pseudo_matrix_task6_2
SVD_pseudo_matrix_task6_1 <- svd(pseudo_matrix_task6_1,
nu = nrow(pseudo_matrix_task6_1),
nv = ncol(pseudo_matrix_task6_1))
SVD_pseudo_matrix_task6_1
sqrt(16)
sqrt(SVD_pseudo_matrix_task6_1.d)
sqrt(SVD_pseudo_matrix_task6_1$d)
.Machine$double.eps
SVD_pseudo_matrix_task6_1$d[SVD_pseudo_matrix_task6_1 < .Machine$double.eps] <- 0
SVD_pseudo_matrix_task6_1$d <- replace(SVD_pseudo_matrix_task6_1$d,
SVD_pseudo_matrix_task6_1$d < .Machine$double.eps,
0)
SVD_pseudo_matrix_task6_1$d
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u * SVD_pseudo_matrix_task6_1$d * SVD_pseudo_matrix_task6_1$v
SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u * sqrt(SVD_pseudo_matrix_task6_1$d) * SVD_pseudo_matrix_task6_1$v
#new_sample1_task6 <-
SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u %*% sqrt(SVD_pseudo_matrix_task6_1$d) %*% SVD_pseudo_matrix_task6_1$v
#new_sample1_task6 <-
dim(SVD_pseudo_matrix_task6_1$u)
dim(SVD_pseudo_matrix_task6_1$d)
dim(SVD_pseudo_matrix_task6_1$v)
SVD_pseudo_matrix_task6_1$d
typeof(SVD_pseudo_matrix_task6_1$d)
typeof(SVD_pseudo_matrix_task6_1$u)
typeof(SVD_pseudo_matrix_task6_1$v)
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u %*%
matrix(sqrt(SVD_pseudo_matrix_task6_1$d), nrow = 4, ncol = 4)  %*%
SVD_pseudo_matrix_task6_1$v
SVD_pseudo_matrix_task6_1_sqrt
sqrt(SVD_pseudo_matrix_task6_1$d), nrow = 4, ncol = 4)
matrix(sqrt(SVD_pseudo_matrix_task6_1$d), nrow = 4, ncol = 4)
sqrt(SVD_pseudo_matrix_task6_1$d)
sqrt(SVD_pseudo_matrix_task6_1$d) %*% diag(4)
qqqq <- sqrt(SVD_pseudo_matrix_task6_1$d) %*% diag(4)
qqqq
qqqq <- diag(sqrt(SVD_pseudo_matrix_task6_1$d))
qqqq
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u %*%
diag(sqrt(SVD_pseudo_matrix_task6_1$d), nrow = 4, ncol = 4)  %*%
SVD_pseudo_matrix_task6_1$v
SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1_sqrt %*% SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u %*%
diag(sqrt(SVD_pseudo_matrix_task6_1$d))  %*%
SVD_pseudo_matrix_task6_1$v
SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1_sqrt %*%  SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1$d)
sqrt(SVD_pseudo_matrix_task6_1$d)
diag(sqrt(SVD_pseudo_matrix_task6_1$d))
SVD_pseudo_matrix_task6_1$u
SVD_pseudo_matrix_task6_1$u %*% diag(sqrt(SVD_pseudo_matrix_task6_1$d)) %*% SVD_pseudo_matrix_task6_1$v
qqqq <- SVD_pseudo_matrix_task6_1$u %*% diag(sqrt(SVD_pseudo_matrix_task6_1$d)) %*% SVD_pseudo_matrix_task6_1$v
qqqq %*% qqqq
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u %*%
diag(sqrt(SVD_pseudo_matrix_task6_1$d))  %*%
transpose(SVD_pseudo_matrix_task6_1$v)
SVD_pseudo_matrix_task6_1_sqrt <- SVD_pseudo_matrix_task6_1$u %*%
diag(sqrt(SVD_pseudo_matrix_task6_1$d))  %*%
t(SVD_pseudo_matrix_task6_1$v)
SVD_pseudo_matrix_task6_1_sqrt
SVD_pseudo_matrix_task6_1_sqrt %*% SVD_pseudo_matrix_task6_1_sqrt
new_sample1_task6 <- matrix(pseudo_mean_task6, nrow = 4) + SVD_pseudo_matrix_task6_1_sqrt %*% t(norm_sample_100_I4)
new_sample1_task6 <- SVD_pseudo_matrix_task6_1_sqrt %*% t(norm_sample_100_I4)
matrix(pseudo_mean_task6, nrow = 4, ncol = 100)
new_sample1_task6 <- matrix(pseudo_mean_task6, nrow = 4, ncol = 100) + SVD_pseudo_matrix_task6_1_sqrt %*% t(norm_sample_100_I4)
# SVD of pseudo matrix sigma 2
SVD_pseudo_matrix_task6_2 <- svd(pseudo_matrix_task6_2,
nu = nrow(pseudo_matrix_task6_2),
nv = ncol(pseudo_matrix_task6_2))
SVD_pseudo_matrix_task6_2$d <- replace(SVD_pseudo_matrix_task6_2$d,
SVD_pseudo_matrix_task6_2$d < .Machine$double.eps,
0)
# SVD of pseudo matrix sigma 2
SVD_pseudo_matrix_task6_2 <- svd(pseudo_matrix_task6_2,
nu = nrow(pseudo_matrix_task6_2),
nv = ncol(pseudo_matrix_task6_2))
SVD_pseudo_matrix_task6_2$d <- replace(SVD_pseudo_matrix_task6_2$d,
SVD_pseudo_matrix_task6_2$d < .Machine$double.eps,
0)
SVD_pseudo_matrix_task6_2_sqrt <- SVD_pseudo_matrix_task6_2$u %*%
diag(sqrt(SVD_pseudo_matrix_task6_2$d))  %*%
t(SVD_pseudo_matrix_task6_2$v)
# before add the mean, it should be duplicated
# i.e. it is just R 4X1, the dimension does not match each other
new_sample2_task6 <- matrix(pseudo_mean_task6, nrow = 4, ncol = 100) + SVD_pseudo_matrix_task6_2_sqrt %*% t(norm_sample_100_I4)
mtcars[ , c(1,3:6)]
plot(new_sample1_task6, pch = 20, cex = 1.5, col = "#69b3a2")
new_sample2_task6
new_sample1_task6
plot(t(new_sample1_task6), pch = 20, cex = 1.5, col = "#69b3a2")
plot(t(new_sample2_task6), pch = 20, cex = 1.5, col = "#69b3a2")
plot(t(new_sample1_task6), pch = 20, cex = 1.5, col = "#69b3a2")
plot(t(new_sample2_task6), pch = 20, cex = 1.5, col = "#69b3a2")
plot(t(norm_sample_100_I4), pch = 20, cex = 1.5, col = "#69b3a2")
plot(t(norm_sample_100_I4), pch = 20, cex = 1.5, col = "#69b3a2")
plot(norm_sample_100_I4, pch = 20, cex = 1.5, col = "#69b3a2")
det(pseudo_matrix_task6_1)
det(pseudo_matrix_task6_2)
diag(SVD_pseudo_matrix_task6_1$d)
library(matlib)
library(MASS)
library(matlib)
ginv(pseudo_matrix_task6_1)
SVD_pseudo_matrix_task6_1_eigenvalue <- diag(SVD_pseudo_matrix_task6_1$d)
ginv(SVD_pseudo_matrix_task6_1_eigenvalue)
SVD_pseudo_matrix_task6_1$u %*% ginv(SVD_pseudo_matrix_task6_1_eigenvalue) %*% t(SVD_pseudo_matrix_task6_1$v)
solve(SVD_pseudo_matrix_task6_1_eigenvalue)
solve(pseudo_matrix_task6_1)
SVD_pseudo_matrix_task6_2_eigenvalue <- diag(SVD_pseudo_matrix_task6_2$d)
ginv_pseudo_matrix_task6_2 <- SVD_pseudo_matrix_task6_2$u %*%
ginv(SVD_pseudo_matrix_task6_2_eigenvalue) %*%
t(SVD_pseudo_matrix_task6_2$v)
inv_pseudo_matrix_task6_2 <- solve(pseudo_matrix_task6_2)
ginv_pseudo_matrix_task6_2
solve(pseudo_matrix_task6_2)
determinant(pseudo_matrix_task6_2)
setwd("~/Desktop/RWTH/SS22/Applied-Data-Analysis/Rlab/Rlab2")
data.frame.survey1a <- read.table("survey1a.csv", header = TRUE, sep = ",")
data.frame.survey1a
data.frame.survey1a <- read.table("survey1a.csv", header = TRUE, sep = ";")
data.frame.survey1a
data.frame.survey1b <- read.table("survey1b.csv", header = TRUE, sep = ";")
data.frame.survey1b
data.frame.survey1b[5]
data.frame.survey1b[4]
data.frame.survey1a[5:]
data.frame.survey1a[5:,]
ncol(data.frame.survey1a)
data.frame.survey1a[,-6]
data.frame.survey1a[,5:ncol(data.frame.survey1a)]
as.numeric(data.frame.survey1a[,5:ncol(data.frame.survey1a)])
x <- list(1:5, 6:9, 7)
x
x <- list(1:7)
x
unlist(x)
x
as.numeric(unlist(data.frame.survey1a[,5:ncol(data.frame.survey1a)]))
as.numeric(data.frame.survey1a[,5])
sapply(data.frame.survey1a[,5:ncol(data.frame.survey1a)], as.numeric)
# b) transform the measured dimensions and the mean score to tpye numeric
data.frame.survey1a[,5:ncol(data.frame.survey1a)] <- sapply(data.frame.survey1a[,5:ncol(data.frame.survey1a)], as.numeric)
data.frame.survey1b[,5:ncol(data.frame.survey1b)] <- sapply(data.frame.survey1b[,5:ncol(data.frame.survey1b)], as.numeric)
library(dplyr)
library(dplyr)
data.frame <- rbind(data.frame.survey1a, data.frame.survey1b)
data.frame
colSums(is.na(data.frame))
colSums(is.na(data.frame))
names(which(colSums(is.na(data.frame))))
names(which(colSums(is.na(data.frame)))
)
names(which(colSums(is.na(data.frame))))
names(which(colSums(is.na(data.frame)) > 0))
data.frame <- fill(data.frame, .direction = "downup")
library(dplyr)
data.frame <- fill(data.frame, .direction = "downup")
data.frame <- dplyr::fill(data.frame, .direction = "downup")
library(tidyr)
data.frame <- fill(data.frame, .direction = "downup")
names(which(colSums(is.na(data.frame)) > 0))
data.frame <- fill(data.frame, .direction = "downup")
names(which(colSums(is.na(data.frame)) > 0))
data.frame %>% fill(data.frame, .direction = "downup")
# merge the two dataframes
data.frame <- rbind(data.frame.survey1a, data.frame.survey1b)
# fill the NA values of each columne
# bad_colnames <- names(which(colSums(is.na(data.frame)) > 0))
fill(data.frame, .direction = "downup")
names(which(colSums(is.na(data.frame)) > 0))
# merge the two dataframes
data.frame <- fill(rbind(data.frame.survey1a, data.frame.survey1b), direction = "downup")
data.frame <- fill(rbind(data.frame.survey1a, data.frame.survey1b), .direction = "downup")
names(which(colSums(is.na(data.frame)) > 0))
qqqq <- data.frame$DimBody
fill(qqqq, .direction = "downup")
# merge the two dataframes
data.frame <- rbind(data.frame.survey1a, data.frame.survey1b)
names(which(colSums(is.na(data.frame)) > 0))
data.frame <- data.frame %>% fill(names(data.frame), .direction = "downup")
names(which(colSums(is.na(data.frame)) > 0))
duplicated(data.frame)
data.frame <- data.frame %>% filter(data.frame, duplicated(data.frame))
data.frame <- data.frame %>% filter(duplicated(data.frame))
data.frame
df_m <- data.frame[data.frame$Sex == 'm']
data.frame
cols(data.frame)
names(data.frame)
data.frame$Sex
data.frame[data.frame$Sex == 'm']
df_m <- data.frame[data.frame$Sex == 'm', ]
df_m
# dataframe only man
df_m <- data.frame[data.frame$Sex == 'm', ]
# dataframe only girls
df_f <- data.frame[data.frame$Sex == 'f', ]
plot(df_m$Age, df_m$DimSchool, pch = 20, col = "blue")
plot(df_m$Age, df_m$DimSchool, pch = 20, col = "blue")
plot(df_f$Age, df_f$DimSchool, pch = 20, col = "red")
ggplot(df_m$Age, df_m$DimSchool, pch = 20, col = "blue")
ggplot(df_f$Age, df_f$DimSchool, pch = 20, col = "red")
age_dimschool_plot <- ggplot(mapping = aes(x = data.frame$Age,
y = data.frame$DimSchool))
#aes(color = Home.Value)
age_dimschool_plot <- ggplot(mapping = aes(x = data.frame$Age,
y = data.frame$DimSchool)) + aes(color = data.frame$Sex)
age_dimschool_plot
age_dimschool_plot <- ggplot(mapping = aes(x = data.frame$Age,
y = data.frame$DimSchool))
age_dimschool_plot + aes(color = data.frame$Sex)
age_dimschool_plot <- age_dimschool_plot + aes(color = data.frame$Sex)
age_dimschool_plot
age_dimschool_plot + geom_point()
age_dimschool_plot <- age_dimschool_plot + aes(color = data.frame$Sex) + geom_poin
+
#aes(color = Home.Value)
age_dimschool_plot <- ggplot(mapping = aes(x = data.frame$Age,
y = data.frame$DimSchool))
age_dimschool_plot <- age_dimschool_plot + aes(color = data.frame$Sex) + geom_point()
age_dimschool_plot
age_dimfriends_box_plot <- age_dimfriends_box_plot + aes(color = data.frame$Sex) + geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
age_dimfriends_box_plot <- ggplot(mapping = aes(x = data.frame$Age,
y = data.frame$DimFriends))
age_dimfriends_box_plot <- age_dimfriends_box_plot + aes(color = data.frame$Sex) + geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
age_dimfriends_box_plot
outlier.size=4)
# e) save the data.frame to .RData
write.csv(data.frame, file = "df_task7", row.names = FALSE)
###################
data.frame.credits <- read.table("credits.wsv", header = TRUE, sep = " ")
data.frame.credits
data.frame.credits$gastarb
1%2
-1 %% 2
2 %% 2
-2 %% 2
data.frame.credits$gastarb <- 3 - data.frame.credits$gastarb
data.frame.credits$gastarb
data.frame.credits$time
10:1
time_score_cuts = (58:0)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = (54:0)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = (54:0)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = (54:0)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = (54:0)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = (54:0)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = (54:0)
time_score_label = (10:2)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
data.frame.credits$time
time_score_cuts = (0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 58, Inf)
time_score_label = (10:1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 58, Inf)
time_score_label = c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts = c(0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 58)
time_score_label = c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts
time_score_cuts = c(0, 6,  12, 18,  24, 30,   36, 42, 48, 54, Inf)
time_score_label = c (10, 9,  8,  7,   6,   5,   4,  3,  2,  1)
time_score_cuts <- cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label)
time_score_cuts
c(time_score_cuts)
amount_score_cuts = c(0, 500, 1000, 1500, 2500, 5000, 7500, 10000, 150000, 20000, Inf)
amount_score_label = c (10, 9,  8,  7,   6,   5,   4,  3,  2,  1)
amount_score_cuts <- c(cut(data.frame.credits$amount, breaks = amount_score_cuts, labels = amount_score_label))
age_score_cuts = c(0, 25, 39, 59, 64, Inf)
age_score_label = c(1,2,3,4,5)
age_score <- c(cut(data.frame.credits$age, breaks = age_score_cuts, labels = age_score_label))
data.frame.credits$dtime <- time_score
time_score_cuts = c(0, 6,  12, 18,  24, 30,   36, 42, 48, 54, Inf)
time_score_label = c (10, 9,  8,  7,   6,   5,   4,  3,  2,  1)
time_score <- c(cut(data.frame.credits$time, breaks = time_score_cuts, labels = time_score_label))
amount_score_cuts = c(0, 500, 1000, 1500, 2500, 5000, 7500, 10000, 150000, 20000, Inf)
amount_score_label = c (10, 9,  8,  7,   6,   5,   4,  3,  2,  1)
amount_score <- c(cut(data.frame.credits$amount, breaks = amount_score_cuts, labels = amount_score_label))
age_score_cuts = c(0, 25, 39, 59, 64, Inf)
age_score_label = c(1,2,3,4,5)
age_score <- c(cut(data.frame.credits$age, breaks = age_score_cuts, labels = age_score_label))
data.frame.credits$dtime <- time_score
data.frame.credits$dtime
data.frame.credits$dtime <- time_score
data.frame.credits$damount <- amount_score
data.frame.credits$dage <- age_score
names(data.frame.credits)
data.frame.credits$repayment
data.frame
names(which(colSums(is.na(data.frame.credits)) > 0))
data.frame.credits$simple.score = colSums(data.frame.credits[,to_sum_columns])
to_sum_columns <- c("account",
"dtime",
"behavior",
"usage",
"damount",
"savings",
"employment",
"rate",
"famgen",
"guaran",
"residence",
"finance",
"dage",
"furthcred",
"home",
"prevcred",
"job",
"pers",
"phone",
"gastarb")
data.frame.credits$simple.score = colSums(data.frame.credits[,to_sum_columns])
write.csv(data.frame.credits, file = "df_task8", row.names = FALSE)
