BIC(modelb)
auc(modelb)
library(ggplot2)
library(pROC)
auc(modelb)
auc(roc(modelb))
roc.curve1=roc(Good.~fitted(modelb), data=newcredit)
plot.roc(roc.curve1, legacy.axes=TRUE)
auc(roc.curve1)
newcredit = read.csv("/Users/thetruetae/Desktop/RWTH/SS21/ADA/RLab/R-Lab8/credits.csv", header = TRUE, sep = ",")
newcredit$guaran2 <- newcredit$guaran
newcredit$guaran2[newcredit$guaran2 == 1] <- 1
newcredit$guaran2[newcredit$guaran2 == 2] <- 1
newcredit$guaran2[newcredit$guaran2 != 1] <- 2
set.seed(2021)
sample_size = floor(0.65*nrow(newcredit))
train_size = floor(0.35*nrow(newcredit))
training_data = newcredit[sample(nrow(newcredit), sample_size), ]
modelb = glm(training_data$repayment ~ training_data$time +
training_data$age +
training_data$savings +
training_data$guaran2 +
as.factor(training_data$account) +
as.factor(training_data$behavior) +
as.factor(training_data$rate) +
as.factor(training_data$finance) +
as.factor(training_data$furthcred) +
as.factor(training_data$home) +
as.factor(training_data$job) +
as.factor(pers), data=training_data,family = binomial)
roc.curve1=roc(Good.~fitted(modelb), data=newcredit)
plot.roc(roc.curve1, legacy.axes=TRUE)
auc(roc.curve1)
roc.curve1=roc(Good.~fitted(modelb), data=newcredit)
roc.curve1=roc(fitted(modelb), data=newcredit)
roc_obj <- roc(modelb, data = newcredit)
plot.roc(roc.curve1, legacy.axes=TRUE)
auc(roc.curve1)
roc_obj <- roc(modelb, data = newcredit)
plot.roc(roc.curve1, legacy.axes=TRUE)
auc(roc.curve1)
roc_obj <- roc(modelb, data = newcredit)
training_data$repayment
modelb
model.2=glm(training_data$repayment ~ training_data$time +
training_data$age +
training_data$savings +
training_data$guaran2 +
as.factor(training_data$account) +
as.factor(training_data$behavior) +
as.factor(training_data$rate) +
as.factor(training_data$finance) +
as.factor(training_data$furthcred) +
as.factor(training_data$home) +
as.factor(training_data$job) +
as.factor(pers), data=training_data,family = binomial(link=logit))
model.select=step(model.2,direction="backward")
model.2
library(ggplot2)
########
#Task19
########
####
#a
####
set.seed(6969)
myedf <- function(a, b, c, phi){
return(function(x,theta){
return(exp((x*theta-b(theta))/a(phi) +c(x,phi)))
})
}
d.nat.exp.fam=function(T.stat,B,h)
{
return(function(x,theta){
return(exp(c(theta%*%T.stat(x))-B(theta))*h(x))
})
}
####
#b
####
my.a1 <- function(my.phi){
return(my.phi)
}
my.b1 <- function(my.v){
ifelse(my.v<0,-log(1 - exp(my.v)),{
warning("b is only defined for theta<0. Return 0 for other values of theta.");
0})
}
my.c1 <- function(my.y, my.phi){
return(0)
}
dgeom.own <- myedf(my.a1, my.b1, my.c1, 1)
theta = -0.8
x = 0:6
comb.table=matrix(0,2,7)
colnames(comb.table)=x
rownames(comb.table)=c("d.exp.disp.fam","dgeom")
comb.table[1,]=dgeom.own(x,theta)
comb.table[2,]=dgeom(x,1-exp(theta))
barplot(comb.table,beside=TRUE,col=c("blue","red"),ylab="probability",xlab="value",legend.text=TRUE,args.legend=list(x="topright"))
n=200
z=rgeom(n,1-exp(theta))
freq.table=table(z)
# freq.table is of class "table"
observed.vals=as.numeric(names(freq.table))
# add all possible values (not just observed values) to the vector
plot.vals=0:max(observed.vals)
comb.table=matrix(0,2,length(plot.vals))
colnames(comb.table)=plot.vals
rownames(comb.table)=c("sample","exp. family")
# compute proportions for the observed values
comb.table[1,observed.vals+1]=freq.table/n
# compute probabilities for all possible values
comb.table[2,]=dgeom.own(plot.vals,theta)
barplot(comb.table,beside=TRUE,col=c("blue","red"),ylab="relative frequency / probability",xlab="value",legend.text=TRUE,args.legend=list(x="topright"))
###
#c
###
c.a <- functon(phi){
return(phi)
}
c.b <- function(theta){
ifelse(theta<0,-log((-theta)^3/2),{
warning("B is only defined for theta<0. Return 0 for other values of theta.");
0})
}
c.c <- function(y, theta){
return(log(y^2))
}
theta = -2
dgeom.own <- myedf(c.a, c.b, c.c, 1)
curve(dgamma.own(x, theta), xlim=c(0,5))
curve(dgamma(x,3,-theta), col = "red", add=TRUE)
n = 200
z = rgamma(n, 3,2)
hist(z,freq=FALSE,ylim=c(0, .8))
curve(dgamma.own(x,theta),col="red",add=TRUE)
# (d)
T.gamma = function(x){
return(matrix(c(log(x),x),byrow = TRUE,nrow=2))
}
B.gamma = function(theta){
return(log(gamma(theta[1]+1))-(theta[1]+1)*log(-theta[2]))
}
h.gamma = function(x){
ifelse(x>=0,1,0)
}
dgamma.own.alt = d.nat.exp.fam(T.gamma,B.gamma,h.gamma)
theta.natural = c(2 , -2)
curve(dgamma.own(x,theta),xlim=c(0,5))
curve(dgamma.own.alt(x,theta.natural),col="red",add=TRUE)
#######
#Task20
#######
sim = read.csv("/Users/thetruetae/Desktop/RWTH/SS21/ADA/RLab/R-Lab6/Sim1.csv", header = TRUE, sep = ",")
lm_sim = lm(sim$y ~sim$x1 + sim$x2, data = sim)
par(mfrow = c(2,2))
plot(lm_sim)
shapiro.test(lm_sim$residuals)
simfit1 = lm(log(sim$y) ~sim$x1 + sim$x2, data = sim)
plot(simfit1)
shapiro.test(simfit1$residuals)
summary(simfit1)
simfit2 = lm(log(sim$y) ~sim$x1, data = sim)
plot(simfit2)
shapiro.test(simfit2$residuals)
summary(simfit2)
par(mfrow = c(2,2))
plot(lm_sim)
shapiro.test(lm_sim$residuals)
par(mfrow = c(2,2))
plot(lm_sim)
simfit1 = lm(log(sim$y) ~sim$x1 + sim$x2, data = sim)
plot(simfit1)
shapiro.test(simfit1$residuals)
summary(simfit1)
simfit1 = lm(log(sim$y) ~sim$x1 + sim$x2, data = sim)
plot(simfit1)
shapiro.test(simfit1$residuals)
id <- rbind(c(1,0,0),c(1,0,1), c(0,0,1))
mean(id)
b = function(x){return(1/(x*ln(x)))}
curve(b, from = 1, to = inf, xlab = "x", ylab = "y")
curve(b, from = 1, to = Inf, xlab = "x", ylab = "y")
curve(b, from = 1, to = 99999999999999999, xlab = "x", ylab = "y")
b = function(x){return(1/(x*log(x)))}
b = function(x){return(1/(x*log(x)))}
curve(b, from = 1, to = 99999999999999999, xlab = "x", ylab = "y")
a <- c(1,2,3)
b <- c(3, -5, 0)
A <- array(c(3, 1.5, 1/8, 5, -pi, -6, -1, exp(2.5), 9), dim(3,3))
a <- c(1,2,3)
b <- c(3, -5, 0)
A <- array(c(3, 1.5, 1/8, 5, -pi, -6, -1, exp(2.5), 9), dim(3,3,1))
a <- c(1,2,3)
b <- c(3, -5, 0)
A <- array(c(3, 1.5, 1/8, 5, -pi, -6, -1, exp(2.5), 9), dim= c(3,3))
A
a <- c(1,2,3)
b <- c(3, -5, 0)
A <- array(c(3, 1.5, 1/8, 5, -pi, -6, -1, exp(2.5), 9), dim= c(3,3))
B <- array(c(1, -2, 3, -2, 4, -6, 3, -6, 9), dim= c(3,3))
B
#A.a
A %*% a
#A.a
A %*% a
#B.b
B %*% b
#A^2
A %*% A
#A.B
A %*% B
#a.T.B
t(a) %*% b
10:7
B + A
B - A
a*b
c(A)
c(B)
c(B)*c(A)
#B^:A
c(B):c(A)
c(1,2,3) : c(5,6,7)
dim(A)
dim(A)[0]
nrow(A)
A[:nrow(A)]
A(:nrow(A))
A[1,]
A[2,]
A[:2,]
c(A)
A[1:2,]
A[2,]
a
a[:1]
a[1:2]
c(A[1,] + A[2,])
A[1,]
bb <- c(c(A[1,]+ A[2]), c(A[3,]))
bb
#iv) B' R2X2
bb <- c(c(B[1,]+ B[2]), c(B[3,]))
bb
t(bb)
#iv) B' R2X2
bb <- array(c(c(B[1,]+ B[2]), c(B[3,])), dim = c(3, 2))
bb
#iv) B' R2X2
bb <- array(c(c(B[1,]+ B[2]), c(B[3,])), dim = c(2, 3))
bb
#iv) B' R2X2
bb <- array(c(c(B[1,]+ B[2]), c(B[3,])), dim = c(3, 2))
ㅠㅠ
bb
#iv) B' R2X2
bb <- t(array(c(c(B[1,]+ B[2]), c(B[3,])), dim = c(3, 2)))
bb
#iv) B' R2X2
bb <- t(array(c(c(B[1,]+ B[2]), c(B[3,])), dim = c(2, 3)))
bb
B[1,]
array(c(B[1,] + B[2,]),c(B[3,]))
array(c(B[1,] + B[2,], B[3,]))
bb <- array(c(B[1,]+ B[2], B[3,]), dim = c(2, 3))
bb
#iv) B' R2X2
bb <- c(B[1,]+ B[2], B[3,])
bb
B[1,]
B[2,]
B[1,] + B[2,]
B[3,]
c(B[1,] + B[2,], B[3,)]
c(B[1,] + B[2,], B[3,])
#iv) B' R2X2
bb <- c(B[1,] + B[2,], B[3,])
bb
#iv) B' R2X2
bb <- array(c(B[1,] + B[2,], B[3,]), dim = c(3,2))
bb
#iv) B' R2X2
bb <- array(c(B[1,] + B[2,], B[3,]), dim = c(2,3))
bb
#iv) B' R2X2
bb <- t(array(c(B[1,] + B[2,], B[3,]), dim = c(2,3)))
bb
#iv) B' R2X2
bb <- t(array(c(B[1,] + B[2,], B[3,]), dim = c(3,2)))
bb
bb <- t(array(c(B[1,] + B[2,], B[3,]), dim = c(3,2)))
result = array(c(bb[,1] + bb[,2], bb[,3]), dim = c(2,2))
result
#b)
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
rep(1,5)
tx0 <- c(9, 4, 6, 5, 3, 10, 5, 3, 5)
x <- rep(0:8, tx0)
x
cut(x, breaks = 3*(-2:5))
-2:5
3*(-2,5)
3*(-:,5)
3*(-2:5)
cut(x, breaks = 3*(-2:5), labels = (1:7))
(-2,5)
(-2:5)
#b)
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
interval = (1:6)
label = (1:3)
cuttingx = cut(x, break = interval, labels = label)
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
interval = (1:6)
label = (1:3)
cuttingx <- cut(x, break = interval, labels = label)
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
interval = (1:6)
label = (1:3)
cuttingx <- cut(x, break = interval, labels = label)
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
interval = (1:6)
label = (1:3)
cuttingx <- cut(x, breaks = interval, labels = label)
(1:3)
(1:6)
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
interval = (0:6)
label = (1:3)
cuttingx <- cut(x, breaks = interval, labels = label)
x
x/2
x <- c(5, 2, 6, 4, 1, 2, 2, 5, 4, 4, 6, 4, 2, 5, 5, 3, 6, 1, 4, 5)
interval = (0:3)
label = (1:3)
cuttingx <- cut(x/2, breaks = interval, labels = label)
cuttingx
v1 <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
v2 <- 1:6
v3 <- 5:10
v2
v3
sum(v1)
v1 <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
v2 <- 1:6
v3 <- 5:10
v4 <- v1*1
v4
v2*v3
sum(v2*v3)
length(A)
qq <- c(2,2,2)
qq^2
qq
qqq <- (1,2,3)
qqq <- c(1,2,3)
qq^qqq
rep(0, length(a))
a[1]
a[2]
a[3]
1*3
sun(a)
sum(a)
sum((v2*v3)^c(1:length(v2)))
ptw_mult <- function(a, b) {
result = rep(0, length(a))
for(i in 1:length(a)) {
result[i] <- (a[i]*b[i])î
}
return(sum(result))
}
#c)
sum((v2*v3)^c(1:length(v2)))
ptw_mult <- function(a, b) {
result = rep(0, length(a))
for(i in 1:length(a)) {
result[i] <- (a[i]*b[i])^i
}
return(sum(result))
}
v2
v4
which(v2 > v4)[1]
1:6
######################
#a)
v1 <- c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE)
v2 <- 1:6
v3 <- 5:10
v4 <- v1*1
#c)
sum((v2*v3)^c(1:length(v2)))
ptw_mult <- function(a, b) {
result = rep(0, length(a))
for(i in 1:length(a)) {
result[i] <- (a[i]*b[i])^i
}
return(sum(result))
}
#d)
which(v2 > v4)[1]
1 != 1
which(v2 > v4)[1]
mywhich <- function(a1, a2){
stopifnot(length(a1) == length(a2))
index <- 0
for(i in 1: length(a1)){
if(a1[i] > a2[i]){
index <- i
break
}
return(index)
}
}
min(1,3)
which(v2 > v4)[1]
######################
credits <- read.csv("credits.csv")
credits <- read.csv("/credits.csv")
setwd("~/Desktop/RWTH/SS22/ADA/Rlab")
#########TASK3########
######################
credits <- read.csv("/credits.csv")
#########TASK3########
######################
credits <- read.csv("credits.csv")
credits
names(credits)
credits[2]
names(credits)
type(1)
credits <- read.table("credits.csv")
credits
#credits <- read.csv("credits.csv")
credits <- read.table("credits.csv", sep = ",")
#ii)
credits
credits <- read.table("credits.csv", header = TRUE, sep = ",")
#ii)
credits
credits["amount"]
typeof(1)
typeof(credits["amount"])
sapply(credits["amount"], typeof)
credits[2,]
credits[,2]
credits[,:9]
credits[,-2]
names(credits)
credits[,-2]
credits[-2,]
credits
credits[-8,]
amount <- credits["amount"]
amount
length(amount)
names(credits)
amount <- credits[,7]
amount
length(amount)
#iii)
amount <- credits[,7]
mean_amount <- sum(amount)/length(amount)
mean_amount
amount <- credits[,7]
mean_amount <- sum(amount)/length(amount)
median_amount <- median(amount)
median_amount
summary(amount)
mean(c(1,2,3,4,5))
sqrt(4)
my.sd <- function(data, corrected = TRUE){
result <- 0
if(corrected){
result = sqrt(sum((data - meam(data))^2)/(length(data)-1))
} else {
result = sqrt(sum((data - meam(data))^2)/(length(data)))
}
return(result)
}
my.sd(amount)
my.sd <- function(data, corrected = TRUE){
result <- 0
if(corrected){
result = sqrt(sum((data - mean(data))^2)/(length(data)-1))
} else {
result = sqrt(sum((data - mean(data))^2)/(length(data)))
}
return(result)
}
my.sd(amount)
my.sd(amount, FALSE)
sd(amount)
sd(amount, FALSE)
dnorm(5, 4)
rnom(5,4)
rnorm(5,4)
rnorm(10,4)
rnorm(10,5,2)
pnorm(7, 5, 2) - pnorm(3, 5, 2)
pnorm(9, 5, 2) - pnorm(5, 5, 2)
r10 <- rnorm(10,5,2)
r50 <- rnorm(50,5,2)
r100 <- rnorm(100,5,2)
r10
mean(r10)
sd(r10)
qrnom(0.3, 5.5899, 2.755)
qnorm(0.3, 5.5899, 2.755)
