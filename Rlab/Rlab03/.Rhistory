n30 = rnorm(30, 5, 2)
n100 = rnorm(100, 5, 2)
n300 = rnorm(300, 5, 2)
n30
hist(n30)
hist(n100)
hist(n300)
density(n300)
hist(n30, lines(density(n30))
)
hist(n30, lines(density(n30)))
density(n30)
table(density(n30))
density(n30)
hist(n30)
lines(density(n30))
hist(n100)
lines(density(n100))
library(mvtnorm)
diag(4)
rep(0,4)
mat_sample = rmvnorm(100, mean = rep(0, 4), sigma = diag(4))
mat_sample
sig1 = matrix(c(4, 2, 2, 3,
2, 3, 2, 1,
2, 2, 5, 2,
3, 1, 2, 3), nrow = 4, ncol = 4)
sig2 = matrix(c(4.5, 4.75, 2, 2.25,
4.75, 5.25, 2.75, 3.25,
2, 2.75, 2.75, 3.5,
2.25, 3.25, 3.5, 4.5), nrow = 4, nrow = 4)
c(4.5, 4.75, 2, 2.25,
4.75, 5.25, 2.75, 3.25,
2, 2.75, 2.75, 3.5,
2.25, 3.25, 3.5, 4.5)
length(c(4.5, 4.75, 2, 2.25,
4.75, 5.25, 2.75, 3.25,
2, 2.75, 2.75, 3.5,
2.25, 3.25, 3.5, 4.5))
sig2 = matrix(c(4.5, 4.75, 2, 2.25,
4.75, 5.25, 2.75, 3.25,
2, 2.75, 2.75, 3.5,
2.25, 3.25, 3.5, 4.5), nrow = 4, ncol = 4)
sig2
svd(sig1)
mat_sample
mat_sample + mu
t(mat_sample) + m
t(mat_sample) + mu
t(mat_sample)[1, ] + mu
t(mat_sample) + mu
t(mat_sample)
SVD_sig1 = svd(sig1)
SVD_sig1
mat_sample + mu
SVD_sig1
sig1_sqrt = SVD_sig1$u %*% matrix(diag(sqrt(SVD_sig1$d))) %*% t(SVD_sig1$v)
SVD_sig1 = svd(sig1)
eig_value_sig1 = SVD_sig1$d
sig1_sqrt = SVD_sig1$u %*% matrix(diag(sqrt(SVD_sig1$d))) %*% t(SVD_sig1$v)
matrix(diag(sqrt(SVD_sig1$d)))
diag(sqrt(SVD_sig1$d))
sig1_sqrt = SVD_sig1$u %*% matrix(diag(sqrt(SVD_sig1$d)), nrow = 4, ncol = 4) %*% t(SVD_sig1$v)
sig1_sqrt
sig1_sqrt = svd(sig1)$u %*% matrix(diag(sqrt(svd(sig1)$d)), nrow = 4, ncol = 4) %*% t(svd(sig1)$v)
transform1 = sig1_sqrt %*% mat_sample + mu
transform1 = sig1_sqrt %*% t(mat_sample) + mu
svd(sig2)
eig_val_sig2 = replace(svd(sig2)$d, svd(sig2)$d < sqrt(.Machine$double.eps), 0)
sig2_sqrt = svd(sig2)$u %*% matrix(diag(sqrt(eig_val_sig2)), nrow = 4, ncol = 4) %*% t(svd(sig2)$v)
transform2 = sig2_sqrt %*% t(mat_sample) + mu
transform2
plot(transform1)
plot(transform2)
transform2
pairs(transform1, pch = 19)
solve(sig1)
ginv(sig1)
library(MASS)
ginv(sig1)
solve(sig2)
ging(sig2)
ginv(sig2)
setwd("~/Desktop/RWTH/SS22/Applied-Data-Analysis/Rlab/Rlab02")
survey1a = read.csv("Survey1a.csv")
survey1a
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1a
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
survey1b
colnames(survey1a)
regexpr("Dim", colnames(survey1a))
which(regexpr("Dim", colnames(survey1a)) == TRUE)
which(regexpr(c("Dim", "Mean)", colnames(survey1a)) == TRUE)
)
which(regexpr(c("Dim", "Mean"), colnames(survey1a)) == TRUE)
which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey[1]
survey[which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)]
survey1a[which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)]
idx = survey1a[which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)]
idx
idx = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
idx
survey1a[idx] = sapply(survey1a[idx], is.numeric)
sapply(survey1a, class)
survey1a[idx] = sapply(survey1a[idx], as.numeric)
sapply(survey1a, class)
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
sapply(survey1b, class)
survey1a[is.na(survey1a)] = 0
survey1a
data.frame object into the R workspace.
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
# (b) Transform the measured dimensions and the mean score of Survey1a.csv
# and Survey1b.csv to type numeric appropriately.
# TODO: Transform the type of columns with name dim & Mean
# HOWTO?
# extract the index of the column names
# which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
# by using regular expression
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
# (c) Create a new data.frame called data.survey
# that contains the observations of Sur- vey1a.csv and Survey1b.csv.
# Remember to fill missing values and to remove duplicated observations.
# Hint: You may use the functions arrange,
# filter and fill from the package dplyr.
# TODO: Fill missing values and remove duplicated obs
survey1a
is.na(survey1a)
survey1a[is.na(survey1a)]
is.na(survey1b)
survey1b[is.na(survey1b)]
survey1b[is.na(survey1b)] = 0
survey1b
[is.na(survey1b)]
is.na(survey1b)
rowSum(is.na(survey1b))
is.na(survey1b)
rowSums(is.na(survey1b))
duplicated(survey1a)
library(tidyverse)
survey1a = survey1a[duplicated(survey1a)]
survey1b = survey1a[duplicated(survey1b)]
survey1b
survey1a
survey1a
#(a) Download the CSV-files Survey1a.csv and Survey1b.csv
# from the RWTHmoodle space of the course Applied Data Analysis and
# import the data as a data.frame object into the R workspace.
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
# (b) Transform the measured dimensions and the mean score of Survey1a.csv
# and Survey1b.csv to type numeric appropriately.
# TODO: Transform the type of columns with name dim & Mean
# HOWTO?
# extract the index of the column names
# which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
# by using regular expression
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
# (c) Create a new data.frame called data.survey
# that contains the observations of Sur- vey1a.csv and Survey1b.csv.
# Remember to fill missing values and to remove duplicated observations.
# Hint: You may use the functions arrange,
# filter and fill from the package dplyr.
# TODO: Fill missing values and remove duplicated obs
survey1a[is.na(survey1a)] = 0
survey1b[is.na(survey1b)] = 0
survey1a = survey1a[!duplicated(survey1a)]
unique(survey1a)
nrow(survey1a)
nrow(unique(survey1a))
nrow(survey1b)
nrow(unique(survey1b))
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
# (b) Transform the measured dimensions and the mean score of Survey1a.csv
# and Survey1b.csv to type numeric appropriately.
# TODO: Transform the type of columns with name dim & Mean
# HOWTO?
# extract the index of the column names
# which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
# by using regular expression
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
# (c) Create a new data.frame called data.survey
# that contains the observations of Sur- vey1a.csv and Survey1b.csv.
# Remember to fill missing values and to remove duplicated observations.
# Hint: You may use the functions arrange,
# filter and fill from the package dplyr.
# TODO: Fill missing values and remove duplicated obs
survey1a[is.na(survey1a)] = 0
survey1b[is.na(survey1b)] = 0
nrow(survey1a)
nrow(unique(survey1a))
survey1a[duplicated(survey1a)]
survey1a[duplicated(survey1b)]
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
survey1a[duplicated(survey1b)]
survey1a[!duplicated(survey1a)]
duplicated(survey1a)
duplicated(survey1b)
duplicated(survey1b) + TRUE
!duplicated(survey1b)
ssurvey1b[!duplicated(survey1b)]
survey1b[!duplicated(survey1b)]
survey1b[!duplicated(survey1b),]
survey1a = survey1a[!duplicated(survey1a), ]
survey1b = survey1a[!duplicated(survey1b), ]
filter(survey1a, !duplicated(survey1a))
survey1b
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
# (b) Transform the measured dimensions and the mean score of Survey1a.csv
# and Survey1b.csv to type numeric appropriately.
# TODO: Transform the type of columns with name dim & Mean
# HOWTO?
# extract the index of the column names
# which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
# by using regular expression
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
# (c) Create a new data.frame called data.survey
# that contains the observations of Sur- vey1a.csv and Survey1b.csv.
# Remember to fill missing values and to remove duplicated observations.
# Hint: You may use the functions arrange,
# filter and fill from the package dplyr.
# TODO: Fill missing values and remove duplicated obs
survey1a[is.na(survey1a)] = 0
survey1b[is.na(survey1b)] = 0
survey1a = survey1a[!duplicated(survey1a), ]
survey1b = survey1a[!duplicated(survey1b), ]
survey1b
survey1a = read.csv("Survey1a.csv", header = TRUE, sep = ";")
survey1b = read.csv("Survey1b.csv", header = TRUE, sep = ";")
# (b) Transform the measured dimensions and the mean score of Survey1a.csv
# and Survey1b.csv to type numeric appropriately.
# TODO: Transform the type of columns with name dim & Mean
# HOWTO?
# extract the index of the column names
# which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
# by using regular expression
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
# (c) Create a new data.frame called data.survey
# that contains the observations of Sur- vey1a.csv and Survey1b.csv.
# Remember to fill missing values and to remove duplicated observations.
# Hint: You may use the functions arrange,
# filter and fill from the package dplyr.
# TODO: Fill missing values and remove duplicated obs
survey1a[is.na(survey1a)] = 0
survey1b[is.na(survey1b)] = 0
survey1a
idxa = which(regexpr("Dim|Mean", colnames(survey1a)) == TRUE)
survey1a[idxa] = sapply(survey1a[idx], as.numeric)
idxb = which(regexpr("Dim|Mean", colnames(survey1b)) == TRUE)
survey1b[idxb] = sapply(survey1b[idx], as.numeric)
survey1a
survey1b
survey1a[is.na(survey1a)] = 0
survey1b[is.na(survey1b)] = 0
survey1b
survey1a[!duplicated(survey1a), ]
survey1b[!duplicated(survey1b), ]
survey1a = survey1a[!duplicated(survey1a), ]
survey1b = survey1b[!duplicated(survey1b), ]
survey1b
data.survey = rbind(survey1a, survey1b)
boxplot(data.survey$DimFriends ~ Sex)
boxplot(data.survey$DimFriends ~ data.survey$Sex)
boxplot(data.survey$DimFriends ~ data.survey$Sex, xlab = "Sex", ylab = "DimFriends")
library(ggplot2)
ggplot(data.survey, aes(x=Age, y=DimSchool, color=Sex)) +
geom_point()
write.csv(data.survey,"survey_task7.RData", row.names = FALSE)
credits = read.csv("credits.wsv", header = TRUE, sep = ";")
credits
credits = read.csv("credits.wsv", header = TRUE, sep = " ")
credits
credits$gastarb
credits$gastarb = (credits$gastarb - 2) * -1
credits$time
time_brk = c(0:9)*6
time_brk
time_brk = (0:9)*6
time_brk
time_lbs = 10:1
time_lbs
cut(credits$time, time_brk, time_lbs)
time_brk
time_brk[1]
time_brk[10] = Inf
time_brk = (0:9)*6
time_brk[10] = Inf
time_lbs = 10:1
cut(credits$time, time_brk, time_lbs)
time_lbs = 10:1
cut(credits$time, time_brk, time_lbs)
time_brk = (0:9)*6
time_brk[11] = Inf
time_lbs = 10:1
cut(credits$time, time_brk, time_lbs)
amount_brk = seq(0, 20000, by = 500)
amount_brk
amount_brk = c(0,
500,
1000,
1500,
2500,
5000,
7500,
10000,
15000,
20000,
Inf)
age_brk = c(0, 25, 39, 59, 64, Inf)
age_lbs = 1:5
credits$age = cut(credits$age, age_brk, age_lbs)
credits = read.csv("credits.wsv", header = TRUE, sep = " ")
# (b) Switch the coding for the binary variable gastarb
# in the data.frame object form 2 to 1 for Gastarbeiter and
# from 1 to 2 for a native worker.
credits$gastarb = (credits$gastarb - 2) * -1
#brks = c(0, 2, 4, 6)
#lbs = c(1,2,3)
#cut(x, brks, lbs)
time_brk = (0:9)*6
time_brk[11] = Inf
time_lbs = 10:1
credits$dtime = cut(credits$time, time_brk, time_lbs)
amount_brk = c(0,
500,
1000,
1500,
2500,
5000,
7500,
10000,
15000,
20000,
Inf)
amount_lbs = 10:1
credits$damount = cut(credits$amount, amount_brk, amount_lbs)
age_brk = c(0, 25, 39, 59, 64, Inf)
age_lbs = 1:5
credits$dage = cut(credits$age, age_brk, age_lbs)
colnames(credits)
repayment_cols = c(account, dtime, behavior, usage, damount, savings, employment, rate, famgen,
guaran, residence, finance, dage, furthcred, home, prevcred, job, pers, phone,
gastarb)
repayment_cols = c("account",
"dtime",
"behavior",
"usage",
"damount",
"savings",
"employment",
"rate",
"famgen",
"guaran",
"residence",
"finance",
"dage",
"furthcred",
"home",
"prevcred",
"job",
"pers",
"phone",
"gastarb")
colnames(credits) - repayment_cols
colnames(credits)
c(colnames(credits)) - repayment_cols
lm.repayment = lm(repayments ~
account+
dtime+
behavior+
usage+
damount+
savings+
employment+
rate+
famgen+
guaran+
residence+
finance+
dage+
furthcred+
home+
prevcred+
job+
pers+
phone+
gastarb, data=credits)
colnames(credits)
lm.repayment = lm(repayment ~
account+
dtime+
behavior+
usage+
damount+
savings+
employment+
rate+
famgen+
guaran+
residence+
finance+
dage+
furthcred+
home+
prevcred+
job+
pers+
phone+
gastarb, data=credits)
credits$simple.score = fitted(lm.repayment)
write.csv(credits,"credits_task8.csv", row.names = FALSE)
pairs(t(transform2))
pairs(t(transform1))
binom_sample = rbinom(30, 12, 0.7)
binom_sample
table(binom_sample)
binom_sample = rbinom(30, 12, 0.7)/30
binom_sample
binom_sample = rbinom(30, 12, 0.7)
binom_pmf = table(binom_sample)/30
binom_pmf
barplot(binom_pmf)
T_m.n.p = sqrt(30) * (mean(binom_sample) - 12*0.7)/sqrt(12*0.7*0.3)
T_m.n.p
my.t.m.n.p = function(m, n, p){
binom_sample = rbinom(m, n, p)
return(sqrt(m) * (mean(binom_sample) - n*p) / sqrt(n*p*(1-p)))
}
rbinom(5, 12, 0.7)
setwd("~/Desktop/RWTH/SS22/Applied-Data-Analysis/Rlab/Rlab03")
solar = read.csv("Solar.csv", header = TRUE, sep = " ")
solar = read.csv("Solar.csv", header = TRUE, sep = " ")
solar
solar = read.csv("Solar.csv", header = TRUE, sep = ";")
solar
solar$batch = as.factor(solar$batch)
solar$batch
pairs(~ Pmax + Imax + Umax + Isc, data = solar, col = solar$batch)
solar
colnames(solar)
solar[2:6,]
solar[,2:6]
pairs(solar[,2:6], col = solar$batch)
pairs(solar[,2:6])
pairs(matrix(solar[,2:6]))
solar = read.table("Solar.csv", header = TRUE, sep = ";")
solar
sapply(solar, clas)
sapply(solar, class)
solar$batch = as.factor(solar$batch)
pairs(solar[,2:6])
colnames(solar)
solar
is.na(solar)
sapply(solar[,2:6], class)
solar = read.table("Solar.csv", header = TRUE, sep = ";")
sapply(solar, class)
solar = read.csv2("Solar.csv", header = TRUE, sep = ";")
sapply(solar, class)
solar$batch = as.factor(solar$batch)
pairs(solar[,2:6], col = solar$batch)
boxplot(solar$Uoc ~ solar$batch, xlab = "batch", ylab = "Uoc")
ggplot(solar, aes(x=batch, y=Uoc, color=batch)) +
geom_boxplot()
pairs(solar$Pmax, solar$Isc)
colnames(solar)
pairs(solar[,c(2,5)])
ones(19)
ones(10)
rep(1, 10)
B = cbind(rep(1, nrow(solar)), solar$Pmax)
B
beta = ginv(t(B) %*% B) %*% t(B) %*% solar$Isc
beta
beta = (ginv(t(B) %*% B) %*% t(B)) %*% solar$Isc
beta
beta = (ginv(t(B) %*% B) %*% t(B)) %*% solar$Isc
beta
t(B) %*% B
ginv(t(B) %*% B)
t(B) %*% solar$Isc
ginv(t(B) %*% B) %*% t(B)
B
solar$Isc
is.na(solar)
which(is.na(solar))
names(which(colSums(is.na(my_df))>0))
names(which(colSums(is.na(solar))>0))
